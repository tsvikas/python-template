[project]
version = "0.0.0+dev"
name = "{{project_name}}"
description = "{{package_description}}"
license.text = "{{license}}"
readme = "README.md"
requires-python = ">=3.{{python_minor}}"
authors = [
  {name = "{{name}}", email = "{{email}}"}
]
maintainers = []
keywords = []
classifiers = [
  # remove when ready to upload to pypi
  "Private :: Do Not Upload",
  # choose more classifiers from the list in https://pypi.org/classifiers/
  # i.e.: Environment, Framework, Intended Audience, Topic
  # update the development status
  "Development Status :: 1 - Planning",
  # license
{%- if license == "Proprietary" %}
{%- elif license == "AGPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
{%- elif license == "GPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
{%- elif license == "LGPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
{%- elif license == "MPL-2.0" %}
  "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
{%- elif license == "Apache-2.0" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif license == "MIT" %}
  "License :: OSI Approved :: MIT License",
{%- elif license == "BSL-1.0" %}
  "License :: OSI Approved :: Boost Software License 1.0 (BSL-1.0)",
{%- elif license == "Unlicense" %}
  "License :: OSI Approved :: The Unlicense (Unlicense)",
{%- endif %}
  # target os
  "Operating System :: OS Independent",
  # python versions
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
{%- if python_minor <= 9 %}
  "Programming Language :: Python :: 3.9",
{%- endif %}
{%- if python_minor <= 10 %}
  "Programming Language :: Python :: 3.10",
{%- endif %}
{%- if python_minor <= 11 %}
  "Programming Language :: Python :: 3.11",
{%- endif %}
{%- if python_minor <= 12 %}
  "Programming Language :: Python :: 3.12",
{%- endif %}
{%- if python_minor <= 13 %}
  "Programming Language :: Python :: 3.13",
{%- endif %}
{%- if python_minor <= 14 %}
  "Programming Language :: Python :: 3.14",
{%- endif %}
  "Typing :: Typed",
]
urls.homepage = "https://github.com/{{username}}/{{project_name}}"
urls.documentation = "https://{{project_name}}.readthedocs.io"
urls.repository = "https://github.com/{{username}}/{{project_name}}"
urls.changelog = "https://github.com/{{username}}/{{project_name}}/blob/master/CHANGELOG.md"

dependencies = [
  "loguru >=0",
  {% if not is_cli %}# {% endif -%}
  "typer >=0",
]

[project.optional-dependencies]
# optional_name = ["some_package >=1.0"]

[project.scripts]
{% if not is_cli -%}# {% endif -%}
{{project_name}} = "{{package_name}}.cli:app"

[project.gui-scripts]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[dependency-groups]
dev = [
  "pre-commit ~=4.0",
  ## debug
  # "icecream",
  # "snoop",
  # "devtools",
  ## ipython/jupyter
  # "ipython",
  # "jupyterlab",
  # "jupytext",
  # "matplotlib",
  # "hvplot",
  # "ipywidgets",
  # "python-lsp-server",
  # "jupyter-collaboration",
  ## testing
  "pytest ~=8.0",
  "pytest-benchmark ~=5.0",
  "pytest-clarity ~=1.0",
  # "pytest-datadir ~=1.0",
  "pytest-cov ~=6.0",
  # "pytest-loguru ~=0.4.0",
  "pytest-pretty ~=1.0",
  # "pytest-regressions ~=2.0",
  "pytest-reverse ~=1.0",
  "pytest-xdist[psutil] ~=3.0",
  # "freezegun ~=1.0",
  # "hypothesis ~=6.0",
  ## typing
  "mypy ~=1.0",
  # "pandas-stubs",
]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "--doctest-modules",
  "--cov={{package_name}}",
  "--numprocesses=auto",
  "--reverse",
  "--benchmark-disable",
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.mypy]
mypy_path = "stubs"
files = ["src", "tests"]
python_version = "3.{{python_minor}}"
warn_unused_configs = true
strict = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "{{package_name}}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff.format]
docstring-code-format = true


[tool.ruff.lint]
# Use google-style conventions for docstrings
pydocstyle.convention = "google"
select = [
  "ALL",
  # extend rules outside pydocstyle google convention
  "D401",  # pydocstyle/non-imperative-mood
  "D404",  # pydocstyle/docstring-starts-with-this
]
ignore = [
  # needed only in large codebases
  "TD002",    # flake8-todos/missing-todo-author
  "TD003",    # flake8-todos/missing-todo-link
  # incompatible with other rules
  "COM812",   # flake8-commas/missing-trailing-comma (incompatible with black)
  # disagree:
  "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
  "PD013",    # pandas-vet/pandas-use-of-dot-stack
  # annoying:
  "EM10",     # flake8-errmsg/*-in-exception
  "RET504",   # flake8-return/unnecessary-assign
  # ban something useful for a possibly good reason
  #"C901",     # mccabe/complex-structure
  #"S101",     # flake8-bandit/assert
  #"PD901",    # pandas-vet/pandas-df-variable-name
  #"FIX00",    # flake8-fixme/line-contains-*
  #"ERA001",   # eradicate/commented-out-code
  #"PLR091",   # PyLint-Refactor/too-many-*
  #"TRY003",   # tryceratops/raise-vanilla-args
]
# objects that should be treated equivalently to a logging.Logger object.
logger-objects = ["loguru.logger"]
# allow the omission of a return type hint for __init__
flake8-annotations.mypy-init-return = true
# allow `dict(a=1, b=2)`
flake8-comprehensions.allow-dict-calls-with-keyword-arguments = true

# flag modules or module members that may not be imported or accessed
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"collections.namedtuple".msg = "Use typing.NamedTuple or @dataclasses.dataclass(frozen=True, slots=True)"

[tool.ruff.lint.per-file-ignores]
"src/{{package_name}}/cli.py" = [
  "T20",      # flake8-print
]
"!tests/test_*.py" = [
  "PT",       # flake8-pytest-style
]
"tests/test_*.py" = [
  "INP001",   # flake8-no-pep420/implicit-namespace-package
  "PLR2004",  # PyLint-Refactor/magic-value-comparison
  "S101",     # flake8-bandit/assert
  "D1",       # pydocstyle/undocumented-*
  "ANN201",   # flake8-annotations/return-type
]


{% if ci == "poe" -%}
[tool.poe]
include = ["poe_tasks.toml"]
{%- endif %}
