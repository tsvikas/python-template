[project]
dynamic = ["version"]
name = "{{project_name}}"
description = ""
license = {text = "{{license}}"}
readme = "README.md"
requires-python = ">=3.{{python_minor}}"
authors = [
    {name = "Tsvika Shapira", email = "tsvikas@gmail.com"}
]
maintainers = []
keywords = []
classifiers = ["Private :: Do Not Upload"]
# urls.homepage = "https://example.com"
# urls.documentation = "https://readthedocs.org"
urls.repository = "https://github.com/tsvikas/{{project_name}}"
# urls.changelog = "https://github.com/tsvikas/{{project_name}}/blob/master/CHANGELOG.md"

dependencies = [
  # "loguru >=0.7.0",
  {%- if is_cli %}
  "typer >=0.15.0",
  {%- endif %}
]

[project.optional-dependencies]
# optional_name = ["some_package >=1.0"]

[project.scripts]
# TODO: this does not work with uv-dynamic-versioning
{%- if not is_cli %}
# {% endif -%}
{{project_name}} = "{{package_name}}.cli:app"

[project.gui-scripts]


[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"


[tool.hatch.version]
source = "uv-dynamic-versioning"


[dependency-groups]
dev = [
   # commit tools
   "black{% if allow_jupyter %}[jupyter]{% endif %} >=24.0",
   "blacken-docs >=1.0",
   "dunamai >=1.0",
   "pre-commit >=4.0",
   "ruff >=0.8.0",
#   # debug
#   "icecream",
#   "snoop",
#   "python-devtools",
#   "birdseye",
   # typing
   "mypy >=1.0",
#   "pandas-stubs",
   # testing
   "pytest >=8.0",
   "pytest-benchmark >=5.0",
   "pytest-clarity >=1.0",
#   "pytest-datadir >=1.0",
   "pytest-cov >=6.0",
#   "pytest-loguru >=0.4.0",
   "pytest-pretty >=1.0",
#   "pytest-regressions >=2.0",
   "pytest-reverse >=1.0",
   "pytest-xdist[psutil] >=3.0",
#   "freezegun >=1.0",
#   "hypothesis >=6.0",
#   # ipython/jupyter
#   "ipython",
#   "jupyterlab",
#   "jupytext",
#   "matplotlib",
#   "hvplot",
#   "ipywidgets",
#   "python-lsp-server",
#   "jupyter-collaboration",
]


[tool.pytest.ini_options]
addopts = """\
  --doctest-modules \
  --cov={{package_name}} \
  --numprocesses auto \
  --reverse \
  --benchmark-disable \
"""


[tool.mypy]
mypy_path = "stubs"
packages = "{{package_name}}"
strict = true


[tool.ruff.format]
docstring-code-format = true


[tool.ruff.lint]
select = [
  "ALL",
  # extend rules outside pydocstyle google convention
  "D401",  # pydocstyle/non-imperative-mood
  "D404",  # pydocstyle/docstring-starts-with-this
]
ignore = [
  # important, unignore when possible:
  "ANN",      # flake8-annotations
  "D1",       # pydocstyle/undocumented-*
  # needed only in large codebases
  "TD002",    # flake8-todos/missing-todo-author
  "TD003",    # flake8-todos/missing-todo-link
  # incompatible with other rules
  "COM812",   # flake8-commas/missing-trailing-comma (incompatible with black)
  # disagree:
  "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
  "PD013",    # pandas-vet/pandas-use-of-dot-stack
  # annoying:
  "EM",       # flake8-errmsg/*
  "RET504",   # flake8-return/unnecessary-assign
  # ban something useful for a possibly good reason
  #"C901",     # mccabe/complex-structure
  #"S101",     # flake8-bandit/assert
  #"FBT001",   # flake8-boolean-trap/boolean-type-hint-positional-argument
  #"FBT002",   # flake8-boolean-trap/boolean-default-value-positional-argument
  #"DTZ",      # flake8-datetimez
  #"PD901",    # pandas-vet/pandas-df-variable-name
  #"FIX",      # flake8-fixme
  #"ERA001",   # eradicate/commented-out-code
  #"PLR091",   # PyLint-Refactor/too-many-*
  #"TRY003",   # tryceratops/raise-vanilla-args
]
# objects that should be treated equivalently to a logging.Logger object.
logger-objects = ["loguru.logger"]

[tool.ruff.lint.flake8-annotations]
# allow the omission of a return type hint for __init__
mypy-init-return = true

[tool.ruff.lint.flake8-comprehensions]
# allow `dict(a=1, b=2)`
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# flag modules or module members that may not be imported or accessed
"collections.namedtuple".msg = "Use typing.NamedTuple, types.SimpleNamespace, or @dataclass"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"{{package_name}}/" = [
  "PT",       # flake8-pytest-style
]
"{{package_name}}/cli.py" = [
  "T201",  # Print statement
]
"tests/*.py" = [
  "INP001",   # flake8-no-pep420/implicit-namespace-package
  "PLR2004",  # PyLint-Refactor/magic-value-comparison
  "S101",     # flake8-bandit/assert
  "D1",       # pydocstyle/undocumented-*
  "ANN201",   # flake8-annotations/return-type
]


{%- if ci == "poe" %}
[tool.poe.tasks]
check        = ["format", "lint", "test"]
test         = "pytest"
benchmark    = """pytest \
  --numprocesses 0 \
  --benchmark-enable \
  --benchmark-autosave \
  --benchmark-only \
  """
lint-mypy    = "mypy"
version      = "dunamai from git"

[tool.poe.tasks.format]
sequence = ["format-isort $target", "format-black $target", "format-black-docs"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-isort]
cmd = "ruff check --select I001 --fix $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black]
cmd = "black $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black-docs]
# TODO: make this run only on selected files
shell = "git ls-files -z -- '*.md' '*.rst' '*.tex' '*.py' | xargs -0 blacken-docs"

[tool.poe.tasks.lint]
sequence = ["lint-ruff $target", "lint-mypy"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint-ruff]
cmd = "ruff check $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks._tag]
cmd = "git tag -a $tagname -m \"version $tagname\" -e"
args = [{name="tagname", positional=true, required=true}]

[tool.poe.tasks.tag]
sequence = ["check", "_tag $tagname"]
args = [{name="tagname", positional=true, required=true}]
{%- endif %}
