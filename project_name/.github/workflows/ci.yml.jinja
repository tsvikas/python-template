name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: true

jobs:
  {%- if format_tool == "black" %}
  black:
    if: {% raw %}${{ always() }}{% endraw %}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          jupyter: {{ "true" if contains_jupyter_files else "false" }}
          version: "~=25.0"
  {%- endif %}
  {%- if format_tool == "ruff" %}
  ruff-format:
    if: {% raw %}${{ always() }}{% endraw %}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
        with:
          args: "format --check"
  {%- endif %}

  ruff-check:
    if: {% raw %}${{ always() }}{% endraw %}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3

  pre-commit:
    if: {% raw %}${{ always() }}{% endraw %}
    env:
      COLUMNS: 120
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pre-commit/action@v3.0.1

  mypy:
    if: {% raw %}${{ always() }}{% endraw %}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --group typing
          --group test
          --exact
          --locked
      - name: List packages
        run: uv pip list
      - name: Run mypy
        run: uv run --no-sync mypy

  test:
    {%- raw %}
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    {%- endraw %}
    strategy:
      matrix:
        include:
          # test with highest resolution
          - resolution: "highest"
            os: ubuntu-latest
            python-version: "3.{{ python_max }}"
          # test with pypy
          {%- set lower_bound = [python_min, 10]|max %}
          {%- set upper_bound = [python_max, 11]|min %}
          {%- for version in range(lower_bound, upper_bound + 1) %}
          - resolution: "highest"
            os: ubuntu-latest
            python-version: "pypy3.{{ version }}"
          {%- endfor %}
          # test with lowest resolution
          - resolution: "lowest"
            os: ubuntu-latest
            python-version: "3.{{ python_min }}"
          # test with different os
          - resolution: "locked"
            os: ubuntu-latest
            python-version: "3.{{ python_min }}"
          - resolution: "locked"
            os: macos-latest
            python-version: "3.{{ python_min }}"
          - resolution: "locked"
            os: windows-latest
            python-version: "3.{{ python_min }}"
          # test on prerelease
          - resolution: "prerelease"
            os: ubuntu-latest
            python-version: "3.{{ python_max }}"
          - resolution: "prerelease"
            os: ubuntu-latest
            python-version: "3.{{ python_max + 1 }}"
    {%- raw %}
    continue-on-error: ${{ matrix.resolution == 'prerelease' || matrix.python-version == 'pypy3.11' }}
    name: test-${{ matrix.python-version }}-${{ matrix.resolution }}-${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: ${{ matrix.resolution }}
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --group test
          --exact
          ${{ matrix.resolution == 'locked' && '--locked' ||
              matrix.resolution == 'lowest' && '--upgrade --resolution lowest-direct' ||
              matrix.resolution == 'highest' && '--upgrade --resolution highest' ||
              matrix.resolution == 'prerelease' && '--upgrade --resolution highest --prerelease allow' ||
              '--NON_RECOGNIZED_RESOLUTION'
          }}
      - name: List packages
        run: uv pip list
      - name: Run tests
        run: uv run --no-sync pytest
    {%- endraw %}

  pylint:
    if: {% raw %}${{ always() }}{% endraw %}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --exact
          --locked
      - name: List packages
        run: uv pip list
      - name: Run Pylint
        run: uv run --no-sync --with pylint pylint src
