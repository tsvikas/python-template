name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main, develop]
  workflow_call:

concurrency:
  group: {{ "${{ github.workflow }}-${{ github.ref }}" }}
  cancel-in-progress: true

jobs:
  {%- if format_tool == "black" %}
  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: psf/black@stable
        with:
          jupyter: {{ "true" if contains_jupyter_files else "false" }}
          use_pyproject: true
  {%- endif %}
  {%- if format_tool == "ruff" %}
  ruff-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: astral-sh/ruff-action@v3
        with:
          args: format --check
  {%- endif %}

  ruff-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: astral-sh/ruff-action@v3

  pre-commit:
    env:
      COLUMNS: 120
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: pre-commit/action@v3.0.1

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@v6
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --group typing
          --group test
          --exact
          --locked
      - name: List packages
        run: uv pip list
      - name: Run mypy
        run: uv run --no-sync mypy

  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@v6
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --all-groups
          --exact
          --locked
      - name: List packages
        run: uv pip list
      - name: Run deptry
        run: uv run --no-sync --with deptry deptry src/
      - name: Run pip-audit
        run: uv run --no-sync --with pip-audit pip-audit --skip-editable

  test:
    strategy:
      matrix:
        include:
          # test with highest resolution
          - resolution: highest
            os: ubuntu-latest
            python-version: '3.{{ python_max }}'
          {%- set lower_bound = [python_min, 10]|max %}
          {%- set upper_bound = [python_max, 11]|min %}
          {%- if lower_bound <= upper_bound %}
          # test with pypy
          - resolution: highest
            os: ubuntu-latest
            python-version: 'pypy3.{{ upper_bound }}'
          {%- endif %}
          # test with lowest resolution
          - resolution: lowest
            os: ubuntu-latest
            python-version: '3.{{ python_min }}'
          # test with different os
          - resolution: locked
            os: ubuntu-latest
            python-version: '3.{{ python_min }}'
          - resolution: locked
            os: macos-latest
            python-version: '3.{{ python_min }}'
          - resolution: locked
            os: windows-latest
            python-version: '3.{{ python_min }}'
          # test on prerelease
          - resolution: prerelease
            os: ubuntu-latest
            python-version: '3.{{ python_max }}'
          - resolution: prerelease
            os: ubuntu-latest
            python-version: '3.{{ python_max + 1 }}'
      fail-fast: false
    {%- raw %}
    runs-on: ${{ matrix.os }}
    name: test-${{ matrix.python-version }}-${{ matrix.resolution }}-${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: ${{ matrix.resolution }}
      - name: Set versions that allow failure
        # pypy and prerelease python versions might fail to install dependencies. In this case, we do not fail the job
        run: >-
          echo "ALLOW_FAILURE=${{ matrix.resolution == 'prerelease' || startsWith(matrix.python-version, 'pypy') }}"
          >> "$GITHUB_ENV"
      - name: Install packages
        id: install_packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --group test
          --exact
          ${{ matrix.resolution == 'locked' && '--locked'
              || matrix.resolution == 'lowest' && '--upgrade --resolution lowest-direct'
              || matrix.resolution == 'highest' && '--upgrade --resolution highest'
              || matrix.resolution == 'prerelease' && '--upgrade --resolution highest --prerelease allow'
              || '--NON_RECOGNIZED_RESOLUTION'
          }}
        continue-on-error: ${{ env.ALLOW_FAILURE == 'true' }}
      - name: Stop job with warning if install fails for specific versions
        if: ${{ env.ALLOW_FAILURE == 'true' && steps.install_packages.outcome == 'failure' }}
        run: >-
          echo "::warning::Stopping job due to installation failure on Python ${{ matrix.python-version }}"
      - name: List packages
        if: ${{ success() && steps.install_packages.outcome == 'success' }}
        run: uv pip list
      - name: Run tests
        if: ${{ success() && steps.install_packages.outcome == 'success' }}
        run: uv run --no-sync pytest --cov-branch --cov-report=xml --junitxml=junit.xml
      - name: Upload coverage reports to Codecov
        if: ${{ success() && steps.install_packages.outcome == 'success' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
    {%- endraw %}

  pylint:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@v6
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --exact
          --locked
      - name: List packages
        run: uv pip list
      # use pylint exitcode to fail only on errors.
      - name: Run Pylint
        run: |
          set +e
          uv run --no-sync --with pylint pylint src --output-format=github
          result=$?
          set -e
          [ $((result & 1)) -ne 0 ] && echo "::error ::Pylint fatal(s) found"
          [ $((result & 2)) -ne 0 ] && echo "::error ::Pylint error(s) found"
          [ $((result & 4)) -ne 0 ] && echo "::warning ::Pylint warning(s) found"
          [ $((result & 8)) -ne 0 ] && echo "::warning ::Pylint refactor(s) found"
          [ $((result & 16)) -ne 0 ] && echo "::warning ::Pylint convention(s) found"
          [ $((result & 32)) -ne 0 ] && echo "::error ::Pylint usage error"
          exit $((result & 35))

  pass:
    if: {{ "${{ always() }}" }}
    needs:
      - {{ "ruff-format" if format_tool == "ruff" else format_tool }}
      - ruff-check
      - pre-commit
      - mypy
      - dependencies
      - test
      - pylint
    runs-on: ubuntu-latest
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: {{ "${{ toJSON(needs) }}" }}
