[tool.poetry]
name = "my_package"
version = "0.0.0"  # managed with poetry-dynamic-versioning
description = ""
authors = ["Tsvika S <tsvikas@gmail.com>"]
# optional settings:
license = "AGPL-3.0-or-later"
readme = "README.md"
repository = "https://github.com/tsvikas/my_package"
# {use if package name != package stub, or package is in a specific dir}
# packages = [{include = "my_package", from = "src"}]

# {use to add a cli}
# [tool.poetry.scripts]
# my-command = "my_package.my_module:run"

[tool.poetry.dependencies]
python = ">=3.12,<4"  # for package
python = "~3.12"  # for app
# loguru = "^0.7"

[tool.poetry.group.dev.dependencies]
black = "^24"
# or use: black = {extras = ["jupyter"], version = "^24"}
blacken-docs = "^1"
dunamai = "^1"
pre-commit = "^4"
ruff = "^0.8"

# [tool.poetry.group.debug.dependencies
# icecream = "*"
# snoop = "*"
# python-devtools = "*"
# birdseye = "*"

[tool.poetry.group.typing.dependencies]
mypy = "^1"
# pandas-stubs = "*"

[tool.poetry.group.testing.dependencies]
pytest = "^8"
pytest-benchmark = "^5"
pytest-clarity = "^1"
# pytest-datadir = "^1"
pytest-cov = "^6"
# pytest-loguru = "^0.4"
pytest-pretty = "^1"
# pytest-regressions = "^2"
pytest-reverse = "^1"
pytest-xdist = {extras = ["psutil"], version = "^3"}
# freezegun = "^1"
# hypothesis = "^6"

# [tool.poetry.group.jupyter.dependencies]
# jupyterlab = "^4"
# jupytext = "*"
# matplotlib = "*"
# hvplot = "*"
# ipywidgets = "*"
# python-lsp-server = "*"
# jupyter-collaboration = "^1.2"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.pytest.ini_options]
addopts = """\
  --doctest-modules \
  --cov=my_package \
  --numprocesses auto \
  --reverse \
  --benchmark-disable \
"""


[tool.mypy]
mypy_path = "stubs"
packages = "my_package"
strict = true


[tool.black]
target-version = ["py312"]
preview = false


[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # important, unignore when possible:
  "ANN",      # flake8-annotations
  "D1",       # pydocstyle/undocumented-*
  # needed only in large codebases
  "TD002",    # flake8-todos/missing-todo-author
  "TD003",    # flake8-todos/missing-todo-link
  # incompatible with other rules
  "D203",     # pydocstyle/one-blank-line-before-class, incompatible D211
  "D212",     # pydocstyle/multi-line-summary-first-line, incompatible D213
  "D400",     # pydocstyle/ends-in-period, incompatible D415
  "COM812",   # flake8-commas/missing-trailing-comma, incompatible with black
  # wrong:
  "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
  "PD013",    # pandas-vet/pandas-use-of-dot-stack
  "EM",       # flake8-errmsg
  # annoying:
  "RET504",   # flake8-return/unnecessary-assign
  "ANN1",     # flake8-annotations/missing-type-self,missing-type-cls
  # ban something useful for a good reason
  #"C901",     # mccabe/complex-structure
  #"S101",     # flake8-bandit/assert
  #"FBT001",   # flake8-boolean-trap/boolean-type-hint-positional-argument
  #"FBT002",   # flake8-boolean-trap/boolean-default-value-positional-argument
  #"DTZ",      # flake8-datetimez
  #"PD901",    # pandas-vet/pandas-df-variable-name
  #"FIX",      # flake8-fixme
  #"ERA001",   # eradicate/commented-out-code
  #"PLR091",   # PyLint-Refactor/too-many-*
  #"TRY003",   # tryceratops/raise-vanilla-args
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true  # allow you to omit the return type annotation for __init__ methods

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.per-file-ignores]
"my_package/" = [
  "PT",       # flake8-pytest-style
]
"tests/*.py" = [
  "INP001",   # flake8-no-pep420/implicit-namespace-package
  "PLR2004",  # PyLint-Refactor/magic-value-comparison
  "S101",     # flake8-bandit/assert
  "D1",       # pydocstyle/undocumented-*
  "ANN201",   # flake8-annotations/return-type
]

[tool.ruff.format]
docstring-code-format = true


# {{keep if using poe}}
[tool.poe.tasks]
check        = ["format", "lint", "test"]
test         = "pytest"
benchmark    = """pytest \
  --numprocesses 0 \
  --benchmark-enable \
  --benchmark-autosave \
  --benchmark-only \
  """
lint-mypy    = "mypy"
version      = "dunamai from git"

[tool.poe.tasks.format]
sequence = ["format-isort $target", "format-black $target", "format-black-docs $target"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-isort]
cmd = "ruff check --select I001 --fix $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black]
cmd = "black $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black-docs]
cmd = "[[ -f $1 ]] && blacken-docs \"$1\" || ([[ -d $1 ]] && git -C \"$1\" ls-files -z -- '*.md' '*.rst' '*.tex' '*.py' | xargs -0 blacken-docs)"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint]
sequence = ["lint-ruff $target", "lint-mypy"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint-ruff]
cmd = "ruff check $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks._tag]
cmd = "git tag -a $tagname -m \"version $tagname\" -e"
args = [{name="tagname", positional=true, required=true}]

[tool.poe.tasks.tag]
sequence = ["check", "_tag $tagname"]
args = [{name="tagname", positional=true, required=true}]
