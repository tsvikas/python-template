[tool.poetry]
# TODO: check that isort works well with known_first_party
# TODO: add hatch option
name = "my_package"
version = "0.0.0"  # managed with poetry-dynamic-versioning
description = ""
authors = ["Tsvika S <tsvikas@gmail.com>"]
# optional settings:
license = "AGPL-3.0-or-later"
readme = "README.md"
repository = "https://github.com/tsvikas/my_package"
# {use if package name != package stub, or package is in a specific dir}
# packages = [{include = "my_package", from = "src"}]

# {use to add a cli}
# [tool.poetry.scripts]
# my-command = "my_package.my_module:run"

[tool.poetry.dependencies]
python = "~3.12"
# icecream / snoop / python-devtools / birdseye = "*"

[tool.poetry.group.dev.dependencies]
black = "^23"
dunamai = "^1.19.0"
ruff = "^0.1.0"
pre-commit = "^3"

[tool.poetry.group.typing.dependencies]
mypy = "^1"
# pandas-stubs = "*"

[tool.poetry.group.testing.dependencies]
pytest = "^7"
pytest-clarity = "^1"
pytest-cov = "^4"
pytest-pretty = "^1"
pytest-reverse = "^1"
# pytest-datadir = "^1.5"
# pytest-regressions = "^2.5"
# hypothesis = "^6"

# [tool.poetry.group.jupyter.dependencies]
# jupyterlab = "^4"
# matplotlib = "*"
# hvplot = "*"
# ipywidgets = "*"
# python-lsp-server = "*"
# jupytext = "*"
# # jupyter-collaboration = "^1.2"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.pytest.ini_options]
addopts = "--doctest-modules --cov=my_package"


[tool.mypy]
mypy_path = "stubs"
packages = "my_package"
strict = true


[tool.black]
target-version = ["py312"]
preview = false


[tool.ruff]
select = ["ALL"]
ignore = [
    # important, unignore when possible:
    "ANN",      # flake8-annotations
    "D1",       # pydocstyle/undocumented-*
    # needed only in large codebases
    "TD002",    # flake8-todos/missing-todo-author
    "TD003",    # flake8-todos/missing-todo-link
    # incompatible with other rules
    "D203",     # pydocstyle/one-blank-line-before-class, incompatible D211
    "D212",     # pydocstyle/multi-line-summary-first-line, incompatible D213
    "D400",     # pydocstyle/ends-in-period, incompatible D415
    "COM812",   # flake8-commas/missing-trailing-comma, incompatible with black
    # wrong:
    "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
    "PD013",    # pandas-vet/pandas-use-of-dot-stack
    "EM",       # flake8-errmsg
    # annoying:
    "RET504",   # flake8-return/unnecessary-assign
    "ANN1",     # flake8-annotations/missing-type-self,missing-type-cls
    # ban something useful for a good reason
    # "C901",     # mccabe/complex-structure
    # "S101",     # flake8-bandit/assert
    # "FBT001",   # flake8-boolean-trap/boolean-type-hint-positional-argument
    # "FBT002",   # flake8-boolean-trap/boolean-default-value-positional-argument
    # "DTZ",      # flake8-datetimez
    # "PD901",    # pandas-vet/pandas-df-variable-name
    # "FIX",      # flake8-fixme
    # "ERA001",   # eradicate/commented-out-code
    # "PLR091",   # PyLint-Refactor/too-many-*
    # "TRY003",   # tryceratops/raise-vanilla-args
]
target-version = "py312"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "INP001",     # flake8-no-pep420/implicit-namespace-package
    "PLR2004",    # PyLint-Refactor/magic-value-comparison
    "S101",       # flake8-bandit/assert
]


# {{keep if using poe}}
[tool.poe.tasks]
check        = ["format", "test", "lint"]

format       = ["format-isort", "format-black"]
format-isort = "ruff check . --select I001 --fix"
format-black = "black ."

test         = "pytest"

lint         = ["lint-ruff", "lint-mypy"]
lint-ruff    = "ruff check ."
lint-mypy    = "mypy"

version      = "dunamai from git"

release      = ["tag", "build"]
build        = "poetry build"

[tool.poe.tasks._tag]
cmd = "git tag -a $tagname -m \"version $tagname\" -e"
args = [{name="tagname", positional=true, required=true}]

[tool.poe.tasks.tag]
sequence = ["check", "_tag $tagname"]
args = [{name="tagname", positional=true, required=true}]
