[project]
# {poetry}
dynamic = ["version", "classifiers"]
# {uv}
dynamic = ["version"]
name = "my-project"
description = ""
# {{choose one}}
license = {text = "AGPL-3.0-or-later"}
license = {text = "GPL-3.0-or-later"}
license = {text = "Proprietary"}
license = {file = "LICENSE"}
# {{/choose}}
readme = "README.md"
# {{choose one}}
# {case package}
requires-python = "~=3.12"
# {case app}
requires-python = "~=3.12.0"
# {{/choose}}
authors = [
    {name = "Tsvika Shapira", email = "tsvikas@gmail.com"}
]
maintainers = []
keywords = []
# {uv}
classifiers = ["Private :: Do Not Upload"]
# urls.homepage = "https://example.com"
# urls.documentation = "https://readthedocs.org"
urls.repository = "https://github.com/tsvikas/my-project"
# urls.changelog = "https://github.com/tsvikas/my-project/blob/master/CHANGELOG.md"

dependencies = [
  # "loguru ~=0.7.0",
]

[project.optional-dependencies]
# optional_name = ["some_package ~=1.0"]

[project.scripts]
# my-command = "my_package.my_module:run"

[project.gui-scripts]


[build-system]
# {{if poetry}}
requires = ["poetry-core >=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
# {{elif uv}}
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"
# {{end}}


[tool.poetry]
# {uncomment if not-package}
# package-mode = false
version = "0.0.0"  # managed with poetry-dynamic-versioning
classifiers = ["Private :: Do Not Upload"]  # change when ready to upload
# {uncomment if using src layout}
# packages = [{include = "my_package", from = "src"}]

[tool.poetry.requires-plugins]
poethepoet = {extras = ["plugin"], version ="~=0.32.0"}
# TODO: enable when possible
# poetry-dynamic-versioning = {extras = ["plugin"], version ="~=1.4"}

[tool.poetry.group.dev.dependencies]
black = "~=24.0"
# or use: black = {extras = ["jupyter"], version = "~=24.0"}
blacken-docs = "~=1.0"
dunamai = "~=1.0"
pre-commit = "~=4.0"
ruff = "~=0.8.0"

# [tool.poetry.group.debug.dependencies
# icecream = "*"
# snoop = "*"
# python-devtools = "*"
# birdseye = "*"

[tool.poetry.group.typing.dependencies]
mypy = "~=1.0"
# pandas-stubs = "*"

[tool.poetry.group.testing.dependencies]
pytest = "~=8.0"
pytest-benchmark = "~=5.0"
pytest-clarity = "~=1.0"
# pytest-datadir = "~=1.0"
pytest-cov = "~=6.0"
# pytest-loguru = "~=0.4.0"
pytest-pretty = "~=1.0"
# pytest-regressions = "~=2.0"
pytest-reverse = "~=1.0"
pytest-xdist = {extras = ["psutil"], version = "~=3.0"}
# freezegun = "~=1.0"
# hypothesis = "~=6.0"

# [tool.poetry.group.jupyter.dependencies]
# jupyterlab = "~=4.0"
# jupytext = "*"
# matplotlib = "*"
# hvplot = "*"
# ipywidgets = "*"
# python-lsp-server = "*"
# jupyter-collaboration = "~=1.2"


## {{uv}}
[dependency-groups]
dev = [
   # commit tools
   "black ~=24.0",
#   "black[jupyter] ~=24.0",
   "blacken-docs ~=1.0",
   "dunamai ~=1.0",
   "pre-commit ~=4.0",
   "ruff ~=0.8.0",
#   # debug
#   "icecream",
#   "snoop",
#   "python-devtools",
#   "birdseye",
   # typing
   "mypy ~=1.0",
#   "pandas-stubs",
   # testing
   "pytest ~=8.0",
   "pytest-benchmark ~=5.0",
   "pytest-clarity ~=1.0",
#   "pytest-datadir ~=1.0",
   "pytest-cov ~=6.0",
#   "pytest-loguru ~=0.4.0",
   "pytest-pretty ~=1.0",
#   "pytest-regressions ~=2.0",
   "pytest-reverse ~=1.0",
   "pytest-xdist[psutil] ~=3.0",
#   "freezegun ~=1.0",
#   "hypothesis ~=6.0",
#   # ipython/jupyter
#   "ipython",
#   "jupyterlab",
#   "jupytext",
#   "matplotlib",
#   "hvplot",
#   "ipywidgets",
#   "python-lsp-server",
#   "jupyter-collaboration",
]
## {{/uv}}


[tool.hatch.version]
source = "uv-dynamic-versioning"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"


[tool.pytest.ini_options]
addopts = """\
  --doctest-modules \
  --cov=my_package \
  --numprocesses auto \
  --reverse \
  --benchmark-disable \
"""


[tool.mypy]
mypy_path = "stubs"
packages = "my_package"
strict = true


[tool.black]
target-version = ["py312"]
preview = false


[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # important, unignore when possible:
  "ANN",      # flake8-annotations
  "D1",       # pydocstyle/undocumented-*
  # needed only in large codebases
  "TD002",    # flake8-todos/missing-todo-author
  "TD003",    # flake8-todos/missing-todo-link
  # incompatible with other rules
  "D203",     # pydocstyle/one-blank-line-before-class, incompatible D211
  "D212",     # pydocstyle/multi-line-summary-first-line, incompatible D213
  "D400",     # pydocstyle/ends-in-period, incompatible D415
  "COM812",   # flake8-commas/missing-trailing-comma, incompatible with black
  # wrong:
  "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
  "PD013",    # pandas-vet/pandas-use-of-dot-stack
  "EM",       # flake8-errmsg
  # annoying:
  "RET504",   # flake8-return/unnecessary-assign
  "ANN1",     # flake8-annotations/missing-type-self,missing-type-cls
  # ban something useful for a good reason
  #"C901",     # mccabe/complex-structure
  #"S101",     # flake8-bandit/assert
  #"FBT001",   # flake8-boolean-trap/boolean-type-hint-positional-argument
  #"FBT002",   # flake8-boolean-trap/boolean-default-value-positional-argument
  #"DTZ",      # flake8-datetimez
  #"PD901",    # pandas-vet/pandas-df-variable-name
  #"FIX",      # flake8-fixme
  #"ERA001",   # eradicate/commented-out-code
  #"PLR091",   # PyLint-Refactor/too-many-*
  #"TRY003",   # tryceratops/raise-vanilla-args
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true  # allow you to omit the return type annotation for __init__ methods

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.per-file-ignores]
"my_package/" = [
  "PT",       # flake8-pytest-style
]
"tests/*.py" = [
  "INP001",   # flake8-no-pep420/implicit-namespace-package
  "PLR2004",  # PyLint-Refactor/magic-value-comparison
  "S101",     # flake8-bandit/assert
  "D1",       # pydocstyle/undocumented-*
  "ANN201",   # flake8-annotations/return-type
]

[tool.ruff.format]
docstring-code-format = true


# {{keep if using poe}}
[tool.poe.tasks]
check        = ["format", "lint", "test"]
test         = "pytest"
benchmark    = """pytest \
  --numprocesses 0 \
  --benchmark-enable \
  --benchmark-autosave \
  --benchmark-only \
  """
lint-mypy    = "mypy"
version      = "dunamai from git"

[tool.poe.tasks.format]
sequence = ["format-isort $target", "format-black $target", "format-black-docs"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-isort]
cmd = "ruff check --select I001 --fix $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black]
cmd = "black $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black-docs]
# TODO: make this run only on selected files
shell = "git ls-files -z -- '*.md' '*.rst' '*.tex' '*.py' | xargs -0 blacken-docs"

[tool.poe.tasks.lint]
sequence = ["lint-ruff $target", "lint-mypy"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint-ruff]
cmd = "ruff check $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks._tag]
cmd = "git tag -a $tagname -m \"version $tagname\" -e"
args = [{name="tagname", positional=true, required=true}]

[tool.poe.tasks.tag]
sequence = ["check", "_tag $tagname"]
args = [{name="tagname", positional=true, required=true}]
